import java.util.Random;
import java.util.Stack;
import java.util.concurrent.locks.Lock;

public class ValueProducer implements Runnable {

    private static int counter = 0;

    private final int id;
    private final Random rnd;
    private final Stack<Integer> stack;

    private final Lock lock;

    private boolean running;


    public ValueProducer(Stack<Integer> stack, Lock lock) {
        this.stack = stack;
        this.lock = lock;
        this.rnd = new Random();
        running = true;
        lock.lock();
        counter++;
        id = counter;
        lock.unlock();
    }

    @Override
    public void run() {
        try {
            while (running) {
                lock.lock();
                if (stack.size() < 10) {
                    int value = rnd.nextInt();
                    System.out.println("Generated by " + id + " value producer: " + value);
                    stack.push(value);
                }
                lock.unlock();
                Thread.sleep(1000);
            }
        } catch (InterruptedException e) {
            System.err.println("Fuck off mother fucker");
        }
    }

    public boolean isRunning() {
        return running;
    }

    public void setRunning(boolean running) {
        this.running = running;
    }
}
